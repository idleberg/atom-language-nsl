fileTypes: [
  "nsl"
]
name: "nsL Assembler"
comment: "https://github.com/atom/atom-language-nsl"
patterns: [
  {
    match: "(\\b|^\\s*)(?i)#(define|else|endif|if|ifend|macro|macroend|nsis|nsisend|return|include)\\b"
    name: "keyword.control.nsl"
  }
  {
    match: "(\\b|^\\s*)(?i)(AddIncludeDir|Include|AddPluginDir|Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|CRCCheck|Call|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CreateDirectory|CreateFont|CreateShortCut|DeleteINISec|DeleteINIStr|Delete|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecWait|ExpandEnvStrings|FileBufSize|FileClose|FileErrorText|File|FileOpen|FileReadByte|FileRead|FileRecursive|FileSeek|FileWriteByte|FileWrite|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDLLVersion|GetDLLVersionLocal|GetDlgItem|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFunctionAddress|GetInstDirError|GetLabelAddress|GetTempFileName|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfSilent|InitPluginsDir|InstProgressFlags|InstTypeGetText|InstType|InstTypeSetText|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|IntFmt|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadLanguageFile|LockWindow|LogSet|LogText|MessageBox|MiscButtonText|Name|OutFile|Pop|Push|Quit|RMDir|RMDirRecursive|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|ReserveFileRecursive|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressorDictSize|SetCompressor|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUninstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|UnRegDLL|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|VIAddVersionKey|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegStr|WriteUninstaller|XPStyle)\\b"
    name: "keyword.command.nsl"
  }
  {
    match: "\\w+\\:\\:\\w+"
    name: "keyword.function.nsl"
  }
  {
    match: "(\\b|^\\s*)(?i)(break|case|default|do|else|for|function|if|page|return|section|switch|uninstall function|uninstall page|uninstall section|while)\\b"
    name: "support.function.nsl"
  }
  {
    match: "(\\b|^\\s*)(?i)(MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES)\\b"
    name: "constant.helpers.nsl"
  }
  {
    match: "[\\\\A-Za-z_.][\\\\A-Za-z_0-9]*(?=\\s*\\()"
    name: "meta.function.nsl"
  }
  {
    match: "\\b(admin|all|auto|both|current|false|force|hide|highest|ifdiff|ifnewer|lastused|listonly|nevershow|none|normal|off|on|show|silent|silentlog|textonly|true|user)\\b"
    name: "constant.flags.nsl"
  }
  {
    match: "\\b((0(x|X)[0-9a-fA-F])|([0-9\\.\\,]+))\\b"
    name: "constant.numeric.nsl"
  }
  {
    match: "@\\$[\\w]+"
    name: "variable.name.unchecked.nsl"
  }
  {
    match: "\\$[\\w]+"
    name: "variable.name.nsl"
  }
  {
    begin: "`"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.nsl"
    end: "(`)|(\\n)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.nsl"
    name: "string.quoted.back.nsl"
    patterns: [
      {
        match: "\\$\\\\."
        name: "constant.character.escape.nsl"
      }
    ]
  }
  {
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.nsl"
    end: "(\")|(\\n)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.nsl"
    name: "string.quoted.double.nsl"
    patterns: [
      {
        match: "\\$\\\\."
        name: "constant.character.escape.nsl"
      }
    ]
  }
  {
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.nsl"
    end: "(')|(\\n)"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.nsl"
    name: "string.quoted.single.nsl"
    patterns: [
      {
        match: "\\$\\\\."
        name: "constant.character.escape.nsl"
      }
    ]
  }
  {
    captures:
      "1":
        name: "punctuation.definition.comment.nsl"
    match: "(//).*$\\n?"
    name: "comment.line.nsl"
  }
  {
    begin: "/\\*"
    captures:
      "0":
        name: "punctuation.definition.comment.nsl"
    end: "\\*/"
    name: "comment.block.nsl"
  }
  {
    include: "source.nsis"
  }
]
scopeName: "source.nsl"
